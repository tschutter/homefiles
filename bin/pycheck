#!/usr/bin/env python3

"""
Run multiple Python static checkers.

Reads ~/.pycheck if it exists, which looks like:

[DEFAULT]
checkers = flake8,pylint
max-line-length = 120

I investigated the wemake-python-stylegui plugin for flake8, but found
it too obnoxious.  Too many bad checks to suppress like no calls to
`print`, no double-quoted strings, no usage of `in` with a non-set
container, etc.
"""

import argparse
import configparser
import os
import pathlib
import re
import subprocess
import sys
import tempfile
import textwrap

import toml


def find_config_file(config_file: str, start_file: str) -> pathlib.Path | None:
    """
    Find a configuration file.

    Look for config_file in the directory that contains start_file and
    all of its parents.
    """

    config_path = pathlib.Path(start_file).resolve()
    for dir_name in config_path.parents:
        attempt = dir_name / config_file
        if attempt.exists():
            return attempt

    return None


def find_checker(checker: str) -> pathlib.Path | None:
    """Determine if a checker is installed."""

    for path in map(pathlib.Path, os.environ["PATH"].split(os.pathsep)):
        exe_file = path / checker
        if exe_file.is_file() and os.access(exe_file, os.X_OK):
            return exe_file

    return None


def run_and_filter(
    pycheck_args: argparse.Namespace,
    args: list[str],
    ignore: str | None = None,
) -> None:
    """Run a program and filter the output."""

    if pycheck_args.verbose:
        print(f"## {' '.join(args)}")

    stdout = subprocess.run(
        args,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        check=False,
        text=True,
    ).stdout

    if ignore and pycheck_args.filter_output:
        re_ignore = re.compile(ignore)
        for line in stdout.split("\n")[:-1]:
            if not re_ignore.match(line):
                print(line)
    else:
        sys.stdout.write(stdout)


def run_flake8(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the flake8 checker."""

    args = [
        program,
        f"--max-line-length={pycheck_args.max_line_length}",
        filename,
    ]
    run_and_filter(pycheck_args, args)


def run_pylint(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the pylint checker."""

    # W1203(logging-fstring-interpolation)
    args = [
        program,
        "--disable=W1203",
        "--reports=no",
        "--score=no",
        f"--max-line-length={pycheck_args.max_line_length}",
        filename,
    ]
    ignore = r"^\*\*\*\*\*\*"  # "|--msg-template"
    run_and_filter(pycheck_args, args, ignore)


def run_pyflakes(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the pyflakes checker."""

    args = [program, filename]
    run_and_filter(pycheck_args, args)


def run_pycodestyle(
    pycheck_args: argparse.Namespace,
    program: str,
    filename: str,
) -> None:
    """Run the pycodestyle checker."""

    # E202 whitespace before ')'
    # E501 line too long - cannot be suppressed per file
    # W503 line break before binary operator
    args = [
        program,
        "--ignore=E202,E501,W503",
        "--repeat",
        f"--max-line-length={pycheck_args.max_line_length}",  # ignored?
        filename,
    ]
    run_and_filter(pycheck_args, args)


def run_black(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the black code formatter."""

    args = [
        program,
        "--diff",
        "--color",
        "--quiet",
        filename,
    ]

    # Specify the line length unless it is specified in a pyproject.toml.
    line_length_configured = False
    config_file = find_config_file("pyproject.toml", filename)
    if config_file:
        config = toml.load(config_file)
        try:
            config["tool"]["black"]["line-length"]  # pylint: disable=W0104
            line_length_configured = True
        except KeyError:
            pass
    if not line_length_configured:
        args.append(f"--line-length={pycheck_args.max_line_length}")

    run_and_filter(pycheck_args, args)


def run_pydocstyle(
    pycheck_args: argparse.Namespace,
    program: str,
    filename: str,
) -> None:
    """Run the pydocstyle checker."""

    # Use --match to allow for files without .py extension.
    args = [program, f"--match={filename}", filename]
    if pycheck_args.pydocstyle_ignore:
        args.append(f"--ignore={pycheck_args.pydocstyle_ignore}")

    # Allow for "Main" function comment in main() or _main().
    # Not good.  Need to do multi-line ignores.
    ignore = (
        r"^.+:[0-9]+ in (private function `_main`|public function `main`):$|"
        r"^\s+D401: First line should be in imperative mood;"
        r" try rephrasing \(found 'Main'\)$"
    )
    run_and_filter(pycheck_args, args, ignore)


def run_mypy(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the mypy checker."""

    # See blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
    args = [
        program,
        "--disallow-untyped-defs",
        "--no-implicit-optional",
        "--check-untyped-defs",
        "--warn-redundant-casts",
        "--warn-unused-ignores",
        "--warn-return-any",
        "--show-error-codes",
        "--no-error-summary",
        filename,
    ]
    if pycheck_args.mypy_python_executable:
        args.append(f"--python-executable={pycheck_args.mypy_python_executable}")

    run_and_filter(pycheck_args, args)


def run_pytype(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the pytype checker."""

    args = [program, "--no-cache", filename]
    # if pycheck_args.pytype_pythonpath:
    #     args.append(f"--pythonpath={pycheck_args.pytype_pythonpath}")

    ignore = (
        r"^Computing dependencies$|"
        r"^(ninja: Entering|Leaving) directory |"
        r"^\[\d+/\d+\] |"
        r"^Analyzing 1 sources with [0-9]+ local dependencies$|"
        r"^Success: no errors found$"
    )

    run_and_filter(pycheck_args, args, ignore)


def run_ruff(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the ruff checker."""

    args = [
        program,
        "check",
        f"--line-length={pycheck_args.max_line_length}",
        "--show-source",
        filename,
    ]

    run_and_filter(pycheck_args, args)


def run_pyright(pycheck_args: argparse.Namespace, program: str, filename: str) -> None:
    """Run the pyright checker."""

    # Create a temporary config file (documented at
    # https://github.com/microsoft/pyright/blob/main/docs/configuration.md).
    config = textwrap.dedent(
        """
        {
            "pythonVersion": "3.9",
            "reportMissingParameterType": false,
            "reportUnknownArgumentType": false,
            "reportUnknownMemberType": false,
            "reportUnknownParameterType": false,
            "reportUnknownVariableType": false,
            "typeCheckingMode": "strict"
        }
        """,
    )
    cfile_handle, cfile_name = tempfile.mkstemp(
        suffix=".json",
        prefix="pyrightconfig_",
    )
    try:
        try:
            os.write(cfile_handle, config.encode("utf-8"))
        finally:
            os.close(cfile_handle)

        args = [program, "--project", cfile_name, filename]
        ignore = (
            # comment out first line to debug config
            rf"Loading configuration file at {cfile_name}$|"
            r"^No configuration file found.$|"
            r"^No pyproject.toml file found.$|"
            r"^stubPath [^\ ]+ is not a valid directory.$|"
            r"^Assuming Python platform [^\ ]+$|"
            r"^Searching for source files$|"
            r"^Found [1-9][0-9]* source file$|"
            r"^0 errors, 0 warnings, 0 informations $|"
            r"^Completed in [0-9]+\.[0-9]+sec$|"
            r"Assuming Python version 3.[0-9]+$|"
            r"Auto-excluding \*\*/node_modules$|"
            r"Auto-excluding \*\*/__pycache__$|"
            r"Auto-excluding \*\*/\.\*$"
        )
        run_and_filter(pycheck_args, args, ignore)

    finally:
        pathlib.Path(cfile_name).unlink()


def check_file(pycheck_args: argparse.Namespace, filename: pathlib.Path) -> None:
    """Check a single file."""

    for checker in pycheck_args.checkers:
        if checker in pycheck_args.disable_checkers:
            print(f"## {checker} disabled")
            continue

        program = find_checker(checker)
        if program is None:
            print(f"## {checker} not installed")
            continue

        print(f"## {checker}")
        if checker in ["pyright", "pytype"] and not str(filename).endswith(".py"):
            # copy contents to temporary file
            with tempfile.NamedTemporaryFile(
                suffix=".py",
                prefix=f"{filename}_",
                dir=".",
                delete=False,
            ) as tfile:
                try:
                    with filename.open("rb") as pyfile:
                        contents = pyfile.read()
                        tfile.write(contents)
                    tfile.close()

                    KNOWN_CHECKERS[checker](
                        pycheck_args,
                        str(program),
                        tfile.name,
                    )
                finally:
                    pathlib.Path(tfile.name).unlink()

        else:
            KNOWN_CHECKERS[checker](pycheck_args, str(program), str(filename))


KNOWN_CHECKERS = {
    "flake8": run_flake8,
    "pylint": run_pylint,
    "pyflakes": run_pyflakes,
    "pycodestyle": run_pycodestyle,
    "black": run_black,
    "pydocstyle": run_pydocstyle,
    "pyright": run_pyright,
    "mypy": run_mypy,
    "pytype": run_pytype,
    "ruff": run_ruff,
}


def parse_args() -> argparse.Namespace:
    """Parse command line arguments."""

    # Build default list of checkers.
    # [2021-06-25] pytype has gotten extremely slow
    # default_checkers = ",".join(
    #     c for c in KNOWN_CHECKERS if c not in ["pytype"]
    # )
    default_checkers = ",".join(KNOWN_CHECKERS)

    class ListCheckersAction(argparse.Action):
        """Action for --list-checkers."""

        def __call__(
            self,
            parser: argparse.ArgumentParser,
            _namespace: None,
            _values: None,
            _option_string: str | None = None,
        ) -> None:
            print(",".join(KNOWN_CHECKERS))
            parser.exit()

    # Define arguments.
    arg_parser = argparse.ArgumentParser(
        description="Run multiple Python static checkers.",
        epilog="Reads ~/.pycheck if it exists for option defaults.",
    )
    arg_parser.add_argument(
        "--list-checkers",
        nargs=0,
        action=ListCheckersAction,
        help="list known checkers and exit",
    )
    arg_parser.add_argument(
        "--checkers",
        metavar="CHECKER[,CHECKER...]",
        default=default_checkers,
        help="checkers to run (default=%(default)s)",
    )
    arg_parser.add_argument(
        "--disable-checkers",
        metavar="CHECKER[,CHECKER...]",
        help="checkers to disable",
    )
    arg_parser.add_argument(
        "--max-line-length",
        metavar="N",
        default=80,
        help="maximum length of any line",
    )
    arg_parser.add_argument(
        "--no-filter",
        dest="filter_output",
        action="store_false",
        default=True,
        help="do not filter noise; use for debugging pycheck",
    )
    arg_parser.add_argument(
        "--pydocstyle-ignore",
        metavar="<codes>",
        help="pydocstyle codes to ignore",
    )
    arg_parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="show command line for each checker",
    )
    arg_parser.add_argument(
        "files",
        metavar="file",
        type=pathlib.Path,
        nargs="+",
        help="file to check",
    )

    # Override defaults from config file.
    config_file = pathlib.Path.home() / ".pycheck"
    if config_file.is_file():
        config = configparser.ConfigParser()
        config.read(config_file)
        items = {k.replace("-", "_"): v for k, v in config.items("DEFAULT")}
        for checker in KNOWN_CHECKERS:
            if checker in config:
                items.update(
                    {
                        f"{checker}_{k.replace('-', '_')}": v
                        for k, v in config.items(checker)
                    },
                )
        arg_parser.set_defaults(**items)

    return arg_parser.parse_args()


def main() -> int:
    """Main."""  # noqa: D401

    # Parse and validate command line arguments.
    args = parse_args()
    if args.list_checkers:
        print(",".join(KNOWN_CHECKERS))
        return 0
    args.checkers = args.checkers.split(",")
    for checker in args.checkers:
        if checker not in KNOWN_CHECKERS:
            print(f"error: unknown checker '{checker}'")
            return 1
    if args.disable_checkers:
        args.disable_checkers = args.disable_checkers.split(",")
    else:
        args.disable_checkers = []

    # Check if specified files exist.
    file_not_found = False
    for filename in args.files:
        if not filename.is_file():
            print(f"error: {filename} not found")
            file_not_found = True
    if file_not_found:
        return 1

    # Check each file.
    first = True
    for filename in args.files:
        if not first:
            print("")
        else:
            first = False
        print(f"### {filename}")
        check_file(args, filename)

    return 0


if __name__ == "__main__":
    main()
