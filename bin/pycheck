#!/bin/sh
#
# Runs multiple Python static checkers.
#

# Process command line.
SINGLE=false
FILES=""
while [ "$1" != "" ]; do
    case $1 in
        -h|"-?"|--help)
            echo "Usage: $(basename "$0") [options] FILE ..." >&2
            echo "  Runs multiple Python static checkers." >&2
            echo "" >&2
            echo "Options:" >&2
            echo "  -h, --help            show this help message and exit" >&2
            echo "  -s, --single          only run first checker found" >&2
            exit 1
            ;;
        -s|--single)
            SINGLE=true
            ;;
        -*)
            echo "ERROR: Unknown option $1" >&2
            exit 1
            ;;
        *)
            if [ "${FILES}" = "" ]; then
                FILES="$1"
            else
                FILES="${FILES} $1"
            fi
            ;;
    esac
    shift
done

if [ "${FILES}" = "" ]; then
    echo "ERROR: no files specified" >&2
    exit 1
fi

checkpath() {
    # Return True if $1 is in ${PATH}.
    IFS=':'
    for dir in $PATH ; do
        if [ -x "$dir/$1" ]; then
           return 0
        fi
    done
    IFS=' '
    return 1
}

# Determine which checkers are installed.
if checkpath pylint; then
    USE_PYLINT=true
else
    USE_PYLINT=false
    echo "## pylint not installed"
fi
if checkpath pychecker; then
    USE_PYCHECKER=true
else
    USE_PYCHECKER=false
    echo "## pychecker not installed"
fi
if checkpath pyflakes; then
    USE_PYFLAKES=true
else
    USE_PYFLAKES=false
    echo "## pyflakes not installed"
fi
if checkpath pep8; then
    USE_PEP8=true
else
    USE_PEP8=false
    echo "## pep8 not installed"
fi

checkfile() {
    FILE="$1"

    if [ "${USE_PYLINT}" = true ]; then
        if ! ${SINGLE}; then
            echo "## pylint"
        fi
        # pylint 1.1.0 has a bug where it emits to stderr this message:
        #   UserWarning: parseable output format is deprecated
        # but there is no way to suppress it.
        ( pylint\
            --reports=no\
            --score=no\
            "${FILE}"\
            2>&1
        ) | grep -v -E '^\*\*\*|--msg-template'
        if ${SINGLE}; then
            exit
        fi
    fi

    if [ "${USE_PYCHECKER}" = true ]; then
        # pychecker raises an ImportError if the file does not end in ".py".
        if [ "${FILE%.py}" != "${FILE}" ]; then
            if ! ${SINGLE}; then
                echo "## pychecker"
            fi
            # --maxargs cannot be specified in ~/.pycheckrc
            pychecker --maxargs=20 --limit=200 --quiet "${FILE}"
            # Cleanup generated bytecode file.
            if [ -f "${FILE}c" ]; then
                rm "${FILE}c"
            fi
            if ${SINGLE}; then
                exit
            fi
        else
            echo "## pychecker not run because input file does not have .py suffix."
        fi
    fi

    if [ "${USE_PYFLAKES}" = true ]; then
        if ! ${SINGLE}; then
            echo "## pyflakes"
        fi
        pyflakes "${FILE}"
        if ${SINGLE}; then
            exit
        fi
    fi

    if [ "${USE_PEP8}" = true ]; then
        if ! ${SINGLE}; then
            echo "## pep8"
        fi
        # E202 whitespace before ')'
        pep8 --ignore=E202 --repeat "${FILE}"
        if ${SINGLE}; then
            exit
        fi
    fi
}

IFS=' '
FIRST=true
for FILE in ${FILES}; do
    if [ ! -f "${FILE}" ]; then
        echo "ERROR: ${FILE} not found" >&2
        exit 1
    else
        if [ "${FIRST}" = true ]; then
            FIRST=false
        else
            echo ""
        fi
        echo "### ${FILE}"
        checkfile "${FILE}"
    fi
done
