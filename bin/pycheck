#!/usr/bin/env python3

"""Run multiple Python static checkers."""

import argparse
import os
import re
import subprocess


def which(checker):
    """Determine if a checker is installed."""

    for path in os.environ["PATH"].split(os.pathsep):
        exe_file = os.path.join(path, checker)
        if os.path.isfile(exe_file) and os.access(exe_file, os.X_OK):
            return exe_file

    return None


def run_pylint(program, filename):
    """Run the pylint checker."""

    args = [program, "--reports=no", "--score=no", filename]
    stdout = subprocess.run(
        args,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True
    ).stdout

    ignore = re.compile(r"^\*\*\*\*\*\*")  # "|--msg-template"
    for line in stdout.split("\n")[:-1]:
        if not ignore.match(line):
            print(line)


def run_pyflakes(program, filename):
    """Run the pyflakes checker."""

    args = [program, filename]
    subprocess.run(args)


def run_pycodestyle(program, filename):
    """Run the pycodestyle checker."""

    # E202 whitespace before ')'
    # E501 line too long - cannot be suppressed per file
    args = [program, "--ignore=E202,E501", "--repeat", filename]
    subprocess.run(args)


def run_pydocstyle(program, filename):
    """Run the pydocstyle checker."""

    args = [program, filename]
    subprocess.run(args)


def check_file(checkers, filename):
    """Check a single file."""

    for checker in checkers:
        program = which(checker)
        if program is None:
            print(f"## {checker} not installed")
        else:
            print(f"## {checker}")
            KNOWN_CHECKERS[checker](program, filename)


KNOWN_CHECKERS = {
    "pylint": run_pylint,
    "pyflakes": run_pyflakes,
    "pycodestyle": run_pycodestyle,
    "pydocstyle": run_pydocstyle
}


def main():
    """Main."""

    # Define arguments.
    arg_parser = argparse.ArgumentParser(
        description="Run multiple Python static checkers."
    )
    arg_parser.add_argument(
        "--checkers",
        default=",".join(KNOWN_CHECKERS.keys()),
        help="output grid file format (default=%(default)s)"
    )
    arg_parser.add_argument(
        "files",
        metavar="file",
        nargs="+",
        help="file to check"
    )

    # Parse and validate command line arguments.
    args = arg_parser.parse_args()
    args.checkers = args.checkers.split(",")
    for checker in args.checkers:
        if checker not in KNOWN_CHECKERS:
            print(f"error: unknown checker '{checker}'")
            return 1

    # Check if specified files exist.
    file_not_found = False
    for filename in args.files:
        if not os.path.isfile(filename):
            print(f"error: {filename} not found")
            file_not_found = True
    if file_not_found:
        return 1

    # Check each file.
    first = True
    for filename in args.files:
        if not first:
            print("")
        else:
            first = False
        print(f"### {filename}")
        check_file(args.checkers, filename)

    return 0


if __name__ == "__main__":
    main()
