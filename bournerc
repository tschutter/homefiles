# Alias, function, and prompt definitions for Bourne-derived shells.
# Sourced by .${SHELL}rc

# Aliases.

# Suppress gdb(1) introductory and copyright messages.
alias gdb="gdb -quiet"

# lynx(1) writes to .lynxrc, so we use an alias instead.
alias lynx="lynx -accept_all_cookies"

# We don't set the LESS environment variable, because that applies to
# PAGER usage (think man).
if [ -x "/usr/bin/less" -o -x "/usr/local/bin/less" ]; then
    # --RAW-CONTROL-CHARS = cause raw ANSI color escape sequences to
    # be displayed.  This fixes output of "pass | more" and which
    # displays colors.
    alias more="less --no-init --quit-at-eof --LONG-PROMPT --RAW-CONTROL-CHARS"
    alias less="less --no-init --quit-at-eof --LONG-PROMPT --RAW-CONTROL-CHARS"
fi

# pgrep(1).
alias pgrep="pgrep -f -l"

# More secure defaults for pwgen(1).
alias pwgen="pwgen --capitalize --numerals --symbols 12"

# Clear the screen and the scrollback buffer.
if [ -x /usr/bin/tput ]; then
    _CLS="/usr/bin/tput reset"
elif [ -x /usr/bin/setterm ]; then
    _CLS="setterm -reset"
else
    _CLS="clear"
fi
if [ "${STY}" != "" ]; then
    # Running within screen(1).
    alias cls='\
        _NSCROLL=`screen -Q info | sed -e "s/[^+]*+//" -e "s/ .*//"`;\
        screen -X scrollback 0;\
        screen -X scrollback ${_NSCROLL};\
        unset _NSCROLL;\
        ${_CLS}\
    '
elif [ "${TMUX}" != "" ]; then
    # Running within tmux(1).
    # tput does not work in tmux.
    # clear must come first.
    alias cls='clear; tmux clear-history'
else
    # Running in a "real" terminal.
    alias cls=${_CLS}
fi

# Platform dependent aliases.
case "${_UNAME}" in
    Cygwin)
        # -W: show windows as well as cygwin processes
        alias ps="ps -W"
        ;;
esac

# Enable color support in various programs.
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls="ls --color=auto"
    alias dir="dir --color=auto --escape --time-style=long-iso -l"
    alias grep="grep --color=auto"
else
    if [ "${_UNAME}" = "OpenBSD" ]; then
        alias dir="/bin/ls -l"
    elif [ "${_UNAME}" = "Darwin" ]; then
        alias dir="/bin/ls -G -l"
    else
        alias dir="/bin/ls --escape -l"
    fi
fi

# Define alphabetical ordering of strings.
# This affects e.g. output of sorted directory listing.
# en_US.UTF-8 = case insensitive
export LC_COLLATE="en_US.UTF-8"

# Setup sensible-browser.
for F in /usr/bin/chromium-browser; do
    if [ -x "${F}" ]; then
        export BROWSER=${F}
        break
    fi
done

# Setup sensible-editor.
if [ -x "/usr/bin/emacsclient" ]; then
    # -a='': if the Emacs server is not running, run `emacs --daemon' to
    #        start Emacs in daemon mode, and try to connect to it
    # -t: open a new Emacs frame on the current terminal
    export EDITOR="/usr/bin/emacsclient -a='' -t"
    export VISUAL="/usr/bin/emacsclient -a=''"
else
    for F in /usr/bin/mg /usr/bin/vi; do
        if [ -x "${F}" ]; then
            export VISUAL=${F}
            break
        fi
    done
fi

# Directory navigation functions.
_cdhelper() {
    CMD="cd $1"
    shift
    for ARG in $*; do
        CMD=${CMD}/${ARG}
    done
    eval ${CMD}
}
home() {
    _cdhelper ${HOME} $*
}
src() {
    _cdhelper ${SRC:-${HOME}/src} $*
}
u() {
    _cdhelper .. $*
}
uu() {
    _cdhelper ../.. $*
}
uuu() {
    _cdhelper ../../.. $*
}
uuuu() {
    _cdhelper ../../../.. $*
}

# Prompt and window title.
# Determine the hostname.
_HOSTNAME=`hostname | /usr/bin/tr '[A-Z]' '[a-z]'`  # Convert to lowercase.
_HOSTNAME=${_HOSTNAME%%.*}  # Strip any domain suffix.
export _HOSTNAME

# Determine '$' or '#' for the suffix.
# See http://cygwin.com/ml/cygwin/2013-10/msg00212.html
# See http://cygwin.com/ml/cygwin/2012-02/msg00806.html
case " `id -G` " in
    *\ 544\ *)
        _PS_DOLLAR="#"
        ;;
    *)
        _PS_DOLLAR="$"
        ;;
esac

# Define fallback git prompt helper function.  Note that when running
# a modern bash, it will be overridden by a much more feature-laden
# version in /etc/bash_completion.  The question marks in this prompt
# indicate that we don't know the modified/push state.
__git_ps1() {
    local b="`git symbolic-ref HEAD 2>/dev/null`"
    if [ -n "$b" ]; then
        printf " (%s ??)" "${b##refs/heads/}";
    fi
}

# _PS1_PREFIX can be optionally set in .bashrc-local or .kshrc-local
# to indicate the type of machine.  For example:
#     case ${_HOSTNAME} in
#         firewall)
#             _PS1_PREFIX='\[\e[1;31m\]FW\[\e[0m\] ' # bright red
#             ;;
#     esac

# Define some prompt strings.
# \[ begin a sequence of non-printing characters
# \] end a sequence of non-printing characters
# \a an ASCII bell character (007)
# \e an ASCII escape character (033)
# \t the current time in 24-hour HH:MM:SS format
# \w the current working directory, with $HOME abbreviated with a tilde
# \e]0;STRING\a sets the icon name and window title to STRING
ps1-default() {
    # Default prompt string.
    if [ "${EMACS}" != "t" ]; then
        PS1='\[\e]0;${_HOSTNAME}:\w\a\]'${_PS1_PREFIX}${_HOSTNAME}':\w'\`__git_ps1\`${_PS_DOLLAR}' '
    fi
}
ps1-time() {
    # Prompt string with timestamp.  Useful if you want to know when a
    # command was run.
    if [ "${EMACS}" != "t" ]; then
        PS1='\[\e]0;${_HOSTNAME}:\w\a\]\t '${_PS1_PREFIX}${_HOSTNAME}':\w'\`__git_ps1\`${_PS_DOLLAR}' '
    fi
}
ps1-history() {
    # Prompt string with history numbers.
    if [ "${EMACS}" != "t" ]; then
        PS1='\[\e]0;${_HOSTNAME}:\w\a\]\!:'${_PS1_PREFIX}${_HOSTNAME}':\w'\`__git_ps1\`${_PS_DOLLAR}' '
    fi
}

# Select the default prompt string.
ps1-default

# Set the window title to a default value when running ssh.  If the
# target machine is configured correctly, it will immediately set the
# window title back to something useful.
alias ssh="[ -t 1 ] && echo -ne '\033]0;ssh\007'; ssh"

# It's nice to know which window has our email.
alias mutt="[ -t 1 ] && echo -ne '\033]0;mutt\007'; mutt"

# Local Variables:
# mode:sh
# End:
